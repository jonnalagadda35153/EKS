apiVersion: v1
kind: Service
metadata:
  name: appn
spec:
  #type: NodePort
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: appn
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appn
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 2
      maxSurge: 2
  selector:
    matchLabels:
      app: appn
  template:
    metadata:
      labels:
        app: appn
    spec:
      containers:
        - name: appn
          image: dmilan/docker-sample-restapp-flask
          resources:
            requests:
              cpu: 200m
              memory: 0.5Gi
            limits:
              cpu: 400m
              memory: 1Gi
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
          ports:
            - containerPort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appn
  annotations:
    kubernets.io/ingress.class: "nginx"
    #nginx.ingress.kubernetes.io/ssl-redirect: "false"
    #nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    #nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: ad7ba6c27491c11ea82740ee48bd3fe7-eafd4f65c6d9c381.elb.us-east-1.amazonaws.com
    http:
      paths:
        - path: /ping
          backend:
            serviceName: appn
            servicePort: 80
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: appn
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: appn
  minReplicas: 3
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 50